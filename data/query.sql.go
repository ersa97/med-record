// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
)

const getPermissionkeysByRoleId = `-- name: GetPermissionkeysByRoleId :many
SELECT permission_key FROM rolepermissions WHERE roleid = ?
`

func (q *Queries) GetPermissionkeysByRoleId(ctx context.Context, roleid int64) ([]sql.NullString, error) {
	rows, err := q.db.Query(ctx, getPermissionkeysByRoleId, roleid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var permission_key sql.NullString
		if err := rows.Scan(&permission_key); err != nil {
			return nil, err
		}
		items = append(items, permission_key)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, rolename, created_at, updated_at, deleted_at FROM roles WHERE id = ? LIMIT 1
`

func (q *Queries) GetRoleById(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Rolename,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, roleid, username, password_hash, created_at, updated_at, deleted_at FROM users WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Roleid,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
